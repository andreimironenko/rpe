function appLogInit()
{
    /* LoggerSys uses System_printf for routing log events */
    var Defaults = xdc.useModule('xdc.runtime.Defaults');
    var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
    var LoggerSysParams = new LoggerSys.Params();
    var cfgArgs = Program.build.cfgArgs;

    Defaults.common$.logger = LoggerSys.create(LoggerSysParams);

    xdc.useModule('xdc.runtime.knl.GateH');

    /* config params specified in package build script */
    var Diags = xdc.useModule('xdc.runtime.Diags');
}

function appMemSegPlacementInit()
{
    var Program = xdc.useModule('xdc.cfg.Program');
    var cfgArgs = Program.build.cfgArgs;

    if (cfgArgs.coreName.match("DSP")) 
    {
        /* 
         * Do section mapping to memory regions
         */
        Program.sectMap[".l2ram"]                = "IRAM";
        Program.sectMap[".vecs"]                 = "DSP";
        Program.sectMap[".text"]                 = "DSP";
        Program.sectMap[".cinit"]                = "DSP";
        Program.sectMap[".pinit"]                = "DSP";
        Program.sectMap[".args"]                 = "DSP";
        Program.sectMap[".switch"]               = "DSP";
        Program.sectMap[".bss:eventList"]        = "DSP";
        Program.sectMap[".const"]                = "DSP";
        Program.sectMap[".bss"]                  = "DSP";
        Program.sectMap[".rodata"]               = "DSP";
        Program.sectMap[".neardata"]             = "DSP";
        Program.sectMap[".fardata"]              = "DSP";
        Program.sectMap[".data"]                 = "DSP";
        Program.sectMap[".sysmem"]               = "DSP"; 
        Program.sectMap[".far"]                  = "DSP";
        Program.sectMap[".cio"]                  = "DSP";
        Program.sectMap[".systemHeap"]           = "DSP"; 
        Program.sectMap[".stack"]                = "DSP";
        Program.sectMap[".stackMemory"]          = "DSP";
        Program.sectMap[".far:taskStackSection"] = "DSP";
        Program.sectMap[".plt"]                  = "DSP";
        Program.sectMap[".intHeap_0"]            = "DSP";
        Program.sectMap[".intHeap_1"]            = "DSP";
        Program.sectMap[".intHeap_2"]            = "DSP";
        Program.sectMap["aacEncProgram"]         = "DSP";
        Program.sectMap["JPEGIDEC_TI_dSect"]     = "DSP";   
        Program.sectMap["JPEGIDEC_TI_cSect"]     = "DSP";
    }
}

function ipcInit(IpcCfgArg)
{
    /* root of the configuration object model */
    var Program = xdc.useModule('xdc.cfg.Program');
    /* config params specified in package build script */
    var cfgArgs = Program.build.cfgArgs;

    if (!cfgArgs.coreName.match("HOST"))
    {
        /* RcmClient requires MessageQ, configure queues, heaps, delegate */
        var Ipc      = xdc.useModule('ti.sdo.ipc.Ipc'); 
        var Settings = xdc.useModule('ti.sdo.ipc.family.Settings');
        var MessageQ = xdc.useModule('ti.sdo.ipc.MessageQ');

        MessageQ.maxNameLen        = 128;
        MessageQ.maxRuntimeEntries = 128;

        var SharedRegion           = xdc.useModule('ti.sdo.ipc.SharedRegion');
        SharedRegion.numEntries    = 4;

        var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
        var multiProcNameList = Settings.getDeviceProcNames();
        MultiProc.setConfig (cfgArgs.coreName,  multiProcNameList);

        var g_srIdx = 0;
        var hostId = MultiProc.getIdMeta("HOST");
        if (cfgArgs.mode.match("local"))
        {
            var sr0OwnerProcId = MultiProc.getIdMeta(null);
        }
        else {
            if (cfgArgs.mode.match("remoteWithHOST")) {
                var sr0OwnerProcId = MultiProc.getIdMeta("HOST");
            }
            else if (cfgArgs.mode.match("remoteDSPWithHOST")) {
                var sr0OwnerProcId = MultiProc.getIdMeta("HOST");
            }
            else if (cfgArgs.mode.match("remoteDSP")) {
                var sr0OwnerProcId = MultiProc.getIdMeta("DSP");
            }      
            else if (cfgArgs.mode.match("remote")) {
                var sr0OwnerProcId = MultiProc.getIdMeta("VIDEO-M3");
            }
            else {
                throw new Error ("Unknown Build Mode " +  cfgArgs.mode);
            }
        }
    }

    var ipcVM3Enable = false;
    var ipcDM3Enable = false;
    var ipcA8Enable  = true;

    print ("ipcVM3Enable : "+ ipcVM3Enable);
    print ("ipcDM3Enable : "+ ipcDM3Enable);
    print ("ipcA8Enable : "+ ipcA8Enable);


    if (!cfgArgs.coreName.match("HOST"))
    {

        /******************/
        Ipc.procSync = Ipc.ProcSync_PAIR;
        /* Set host id */
        Ipc.hostProcId = hostId;
        Ipc.sr0MemorySetup = true;
        for (var i=0; i < MultiProc.numProcessors; i++) {
            Ipc.setEntryMeta({
                        remoteProcId: i,
                        setupNotify:true,
                        setupMessageQ:true
                            });
    }

    /* Shared 0 Memory Map */
    sr0Segment = undefined;
    for (var i = 0; i < Program.cpu.memoryMap.length; i++) 
    {
        if (Program.cpu.memoryMap[i].name == IpcCfgArg.sr0MemSegmentName) {
            sr0Segment = Program.cpu.memoryMap[i];
        }
    }

    if (sr0Segment == undefined) 
    {
        throw new(Error("Section named " + IpcCfgArg.sr0MemSegmentName + " undefined. PLease update memmap"));
    }

    /*
     *  Need to define the shared region. The IPC modules use this
     *  to make portable pointers. All processors need to add this
     *  call with their base address of the shared memory region.
     *  If the processor cannot access the memory, do not add it.
     */
    SharedRegion.setEntryMeta(0,
            { base: sr0Segment.base,
              len:  sr0Segment.len,
              ownerProcId: sr0OwnerProcId,
              isValid: true,
              cacheEnable:true,
              name: "Sr0",
            });
    }

    return (g_srIdx);
}

function biosInit()
{
    /* root of the configuration object model */
    var Program = xdc.useModule('xdc.cfg.Program');
    /* config params specified in package build script */
    var cfgArgs = Program.build.cfgArgs;

    /* Clock tick in microseconds */
    var Clock           = xdc.useModule("ti.sysbios.knl.Clock");
    Clock.tickPeriod    = 1000;

    var Cache = xdc.useModule('ti.sysbios.family.c64p.Cache');
    Cache.MAR128_159 = 0xFFFFFFFF;  
    Cache.MAR160_191 = 0x7FFFFFFF;

    /* configure BIOS */
    BIOS                = xdc.useModule('ti.sysbios.BIOS');
    BIOS.clockEnabled   = true;
    BIOS.rtsGateType    = BIOS.GateHwi;

    /* XDC runtime configuration */
    xdc.useModule('xdc.runtime.knl.Semaphore').Proxy = 
    xdc.useModule('ti.sysbios.xdcruntime.SemProcessSupport'); 
}
