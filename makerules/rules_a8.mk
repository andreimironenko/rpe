# Filename: rules_a8.mk
#
# Make rules for A8 - This file has all the common rules and defines required
#                     for Cortex-A8 ISA
#
# This file needs to change when:
#     1. Code generation tool chain changes (currently it uses CodeSourcery)
#     2. Internal switches (which are normally not touched) has to change
#     3. XDC specific switches change
#     4. a rule common for A8 ISA has to be added or modified

# Set compiler/archiver/linker commands and include paths
CODEGEN_INCLUDE = $(CODEGEN_PATH_A8)
CC = $(CODEGEN_PATH_A8)/bin/arm-none-linux-gnueabi-gcc
AR = $(CODEGEN_PATH_A8)/bin/arm-none-linux-gnueabi-ar
LNK = $(CODEGEN_PATH_A8)/bin/arm-none-linux-gnueabi-ld

# Internal CFLAGS - normally doesn't change
CFLAGS_INTERNAL = -fPIC -fno-strict-aliasing -MD -MF $(DEPFILE).P -march=armv5t -Dfar= -D_DEBUG_=1 -DMULTICHANNEL_OPT=1
CFLAGS_DIROPTS = 

# Following 'if...' block is for an application; to add a #define for each
#   component in the build. This is required to know - at compile time - which
#   components are on which core.
ifndef MODULE_NAME
  # Derive list of all packages from each of the components needed by the app
  PKG_LIST_LOCAL = $(foreach COMP,$(COMP_LIST_$(CORE)),$($(COMP)_PKG_LIST))

  # Defines for the app and cfg source code to know which components/packages
  # are included in the build for the local CORE...
  CFLAGS_APP_DEFINES = $(foreach PKG,$(PKG_LIST_LOCAL),-D_LOCAL_$(PKG)_)
  CFLAGS_APP_DEFINES += $(foreach PKG,$(PKG_LIST_LOCAL),-D_BUILD_$(PKG)_)

  ifeq ($(CORE),a8host)
    PKG_LIST_REMOTE = $(foreach COMP,$(COMP_LIST_m3video),$($(COMP)_PKG_LIST))
    PKG_LIST_REMOTE += $(foreach COMP,$(COMP_LIST_m3vpss),$($(COMP)_PKG_LIST))
    PKG_LIST_REMOTE += $(foreach COMP,$(COMP_LIST_c6xdsp),$($(COMP)_PKG_LIST))    
    CFLAGS_APP_DEFINES += -D_LOCAL_CORE_a8host_
  endif

  # Defines for the app and cfg source code to know which components/packages
  # are included in the build for the remote CORE...
  CFLAGS_APP_DEFINES += $(foreach PKG,$(PKG_LIST_REMOTE),-D_REMOTE_$(PKG)_)
  CFLAGS_APP_DEFINES += $(foreach PKG,$(PKG_LIST_REMOTE),-D_BUILD_$(PKG)_)
endif

# Assemble CFLAGS from all other CFLAGS definitions
_CFLAGS = $(CFLAGS_GLOBAL_$(CORE)) $(CFLAGS_INTERNAL) $(CFLAGS_LOCAL_COMMON) $(CFLAGS_LOCAL_$(CORE)) $(CFLAGS_LOCAL_$(PLATFORM)) $(CFLAGS_LOCAL_$(SOC)) $(CFLAGS_APP_DEFINES) $(CFLAGS_COMP_COMMON) $(CFLAGS_GLOBAL_$(PLATFORM))

# Add some necessary INCLUDES from CodeSourcery
INCLUDES += -I$(CODEGEN_PATH_A8)/arm-none-linux-gnueabi/libc/usr/include

# Object file creation
# The first $(CC) generates the dependency make files for each of the objects
# The second $(CC) compiles the source to generate object
$(OBJ_PATHS): $(OBJDIR)/%.$(OBJEXT): %.c
	$(ECHO) ARM-CC $< 
	$(Q)$(CC) $(_CFLAGS) $(INCLUDES) $(CFLAGS_DIROPTS) -o $(OBJDIR)/$(basename $(notdir $<)).$(OBJEXT) $<

# Archive flags - normally doesn't change
ARFLAGS = cr

# Archive/library file creation
$(LIBDIR)/$(MODULE_NAME).$(LIBEXT) : $(OBJ_PATHS)
	$(ECHO) ARM-AR $(notdir $@)
	$(Q)$(AR) $(ARFLAGS) $@ $(OBJ_PATHS)

archive_spl:
	$(ECHO) [SPL] ARM-AR $(AR_SPL_NAME)...
	$(Q)$(AR) $(ARFLAGS) $(AR_SPL_PATH)/$(AR_SPL_NAME) $(AR_SPL_PATH)/*.ov5T

# Linker options and rules
LNKFLAGS_INTERNAL_COMMON =  -lpthread -lrt -L$(CODEGEN_PATH_A8)/arm-none-linux-gnueabi/lib

# Assemble Linker flags from all other LNKFLAGS definitions
_LNKFLAGS = $(LNKFLAGS_INTERNAL_COMMON) $(LNKFLAGS_GLOBAL_$(CORE)) $(LNKFLAGS_LOCAL_COMMON) $(LNKFLAGS_LOCAL_$(CORE)) 

# Path of the RTS library - normally doesn't change for a given tool-chain
RTSLIB_PATH = 
LIB_PATHS += 

LNK_LIBS = $(addprefix -l,$(LIB_PATHS))
# Linker - to create executable file 
$(BINDIR)/$(APP_NAME)_$(CORE)_$(PROFILE_$(CORE)).$(EXEEXT) : $(OBJ_PATHS) $(LIB_PATHS) link_dep_extension $(LNKCMD_FILE)
	$(ECHO) ARM-LD $(notdir $@)
	$(Q)$(CC) -Xlinker --start-group $(OBJ_PATHS) $(LIB_PATHS) $(EXTLIBS_a8host) $(_LNKFLAGS) -Xlinker --end-group -o $@

# Blank link dependent step extension, in case nothing is defined by rules extend
#  include file
link_dep_extension:

$(LNKCMD_FILE) :

# Include dependency make files that were generated by $(CC)
-include $(SRCS:%.c=$(DEPDIR)/%.P)

# Nothing beyond this point
